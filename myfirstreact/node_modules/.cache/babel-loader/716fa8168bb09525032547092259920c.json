{"ast":null,"code":"var _jsxFileName = \"/Users/simranbhake/Desktop/ProjectProgress/React/myfirstreact/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; //This is when the component is defined in some other file.\n// import Car from './app.js';\n// render JSX component\n// const JSX = (\n//   <div>\n//     <h1 > Hello World < /h1>\n//     <p> Lets render this to the DOM < /p>\n//   </div>\n// );\n// ReactDOM.render(JSX, document.getElementById('root'));\n//\n// rendering stateless functional component\n// const ChildComponent = () => {\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>I am the child</p>\n// \t\t</div>\n// \t);\n// };\n//\n// ReactDOM.render(<ChildComponent />, document.getElementById('root'));\n//React component\n// class Car extends React.Component {\n//   render() {\n//     return <h2>Hi, I am a Car!</h2>;\n//   }\n// }\n//constructor component:\n// class Car extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {color: \"red\"};\n//   }\n//   render() {\n//     return <h2>I am a {this.state.color} Car!</h2>;\n//   }\n// }\n//Components inside component\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a Car!</h2>;\n//   }\n// }\n// class Garage extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//       <h1>Who lives in my Garage?</h1>\n//       <Car />\n//       </div>\n//     );\n//   }\n// }\n//React props\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a {this.props.model}!</h2>;\n//   }\n// }\n//If the component has a constructor in it then props should be passed through super()\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return <h2>I am a Car, a {this.props.model}!</h2>;\n//   }\n// }\n// ReactDOM.render(<Car model=\"Mustang\"/>, document.getElementById('root'));\n//passing an array using props\n// const List = (props) => {\n//   return <p>{props.tasks.join(\", \")}</p>\n// };\n//\n// class ToDo extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>To Do Lists</h1>\n//         <h2>Today</h2>\n//         <List tasks={[\"Code\", \"Eat\", \"Code\"]} />\n//         <h2>Tomorrow</h2>\n//         <List tasks={[\"Code\", \"Code\", \"Eat\"]}/>\n//       </div>\n//     );\n//   }\n// };\n// ReactDOM.render(<ToDo />, document.getElementById('root'))\n//State object\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       brand: \"Ford\",\n//       model: \"Mustang\",\n//       color: \"red\",\n//       year: 1964\n//     };\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>My {this.state.brand}</h1>\n//         <p>\n//           It is a {this.state.color} {this.state.model}\n//           from {this.state.year}.\n//         </p>\n//       </div>\n//     );\n//   }\n// }\n//change state object\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       brand: \"Ford\",\n//       model: \"Mustang\",\n//       color: \"red\",\n//       year: 1964\n//     };\n//\n//     // this.changeColor = this.changeColor.bind(this)\n//   }\n//\n//   changeColor = () => {\n//     this.setState({color: \"blue\"});\n//   }\n//\n//   // changeColor() {\n//   //   this.setState({color: \"blue\"});\n//   // }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>My {this.state.brand}</h1>\n//         <p>\n//           It is a {this.state.color} {this.state.model} from {this.state.year}.\n//         </p>\n//         <button type=\"button\" onClick={this.changeColor}>Change color</button>\n//       </div>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Car />, document.getElementById('root'));\n// Change state based on the previous state, in this case do visibility toggle\n// class MyComponent extends React.Component {\n//\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       visibility: false\n//     }\n//\n//     this.toggleVisibility = this.toggleVisibility.bind(this)\n//   }\n//\n//   toggleVisibility() {\n//     this.setState(state => {\n//       if(state.visibility===true){\n//         return {visibility: false}\n//       }\n//       else {\n//         return {visibility: true}\n//       }\n//     });\n//   }\n//\n//   render() {\n//     if(this.state.visibility) {\n//       return (\n//         <div>\n//           <button onClick = {this.toggleVisibility}>Click Me</button>\n//           <h1>Heyy I'm visible</h1>\n//         </div>\n//       )\n//     }\n//     else {\n//       return (\n//         <div>\n//           <button onClick = {this.toggleVisibility}>Click Me</button>\n//         </div>\n//       )\n//     }\n//   }\n//\n// }\n//\n// ReactDOM.render(<MyComponent />, document.getElementById('root'));\n// using setState to dynamically display input text:\n// class ControlledInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       input: ''\n//     };\n//\n//     this.handleChange = this.handleChange.bind(this)\n//   }\n//\n//   handleChange(event) {\n//     this.setState({input: event.target.value});\n//     console.log(typeof event);\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <input value = {this.state.input} onChange = {this.handleChange}></input>\n//         <h4>Controlled Input:</h4>\n//         <p>{this.state.input}</p>\n//       </div>\n//     );\n//   }\n// };\n// Passing state as props to child react components:\n// class MyApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       name: 'CamperBot'\n//     }\n//   }\n//   render() {\n//     return (\n//        <div>\n//          <Navbar name = {this.state.name}/>\n//        </div>\n//     );\n//   }\n// };\n//\n// class Navbar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//     <div>\n//       <h1>Hello, my name is: {this.props.name} </h1>\n//     </div>\n//     );\n//   }\n// };\n// Passing methods / handler functions to child component as props:\n// class MyApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       inputValue: ''\n//     }\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   handleChange(event) {\n//     this.setState({\n//       inputValue: event.target.value\n//     });\n//   }\n//\n//   render() {\n//     return (\n//        <div>\n//         { /* change code below this line */ }\n//         <GetInput input={this.state.inputValue} handleChange = {this.handleChange}/>\n//         <RenderInput input={this.state.inputValue}/>\n//         { /* change code above this line */ }\n//        </div>\n//     );\n//   }\n// };\n//\n// class GetInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h3>Get Input:</h3>\n//         <input value={this.props.input} onChange={this.props.handleChange}/>\n//       </div>\n//     );\n//   }\n// };\n//\n// class RenderInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h3>Input Render:</h3>\n//         <p>{this.props.input}</p>\n//       </div>\n//     );\n//   }\n// };\n//\n// ReactDOM.render(<MyApp />, document.getElementById('root'));\n//getDerivedStateFromProps\n// class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n//   static getDerivedStateFromProps(props, state) {\n//     return {favoritecolor: props.favcol };\n//   }\n//   render() {\n//     return (\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Header favcol=\"blue\"/>, document.getElementById('root'));\n// componentWillMount\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   componentWillMount() {\n//     // change code below this line\n//     console.log(\"What is happening?\")\n//     // change code above this line\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Why should I use this??</h1>\n//         <h1>My name {this.props.name}</h1>\n//       </div>\n//     )\n//   }\n// };\n// ReactDOM.render(<MyComponent name=\"Lily\"/>, document.getElementById('root'));\n// componentDidMount and componentWillUnmount\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       message: ''\n//     };\n//     this.handleEnter = this.handleEnter.bind(this);\n//     this.handleKeyPress = this.handleKeyPress.bind(this);\n//   }\n//\n//   componentDidMount() {\n//     document.addEventListener(\"keydown\", this.handleKeyPress)\n//   }\n//\n//   componentWillUnmount() {\n//     document.removeEventListener(\"keydown\", this.handleKeyPress)\n//   }\n//\n//   handleEnter() {\n//     this.setState({\n//       message: this.state.message + 'You pressed the enter key! '\n//     });\n//   }\n//\n//   handleKeyPress(event) {\n//     if (event.keyCode === 13) {\n//       this.handleEnter();\n//     }\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>{this.state.message}</h1>\n//       </div>\n//     );\n//   }\n// };\n//componentDidMount\n// class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n//   componentDidMount() {\n//     setTimeout(() => {\n//       this.setState({favoritecolor: \"yellow\"})\n//     }, 1000)\n//   }\n//   render() {\n//     return (\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Header />, document.getElementById('root'));\n//shouldComponentUpdate and componentDidUpdate\n\nclass OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n\n    if (nextProps.value % 2 === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n    console.log(this.props.value);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 12\n      }\n    }, this.props.value);\n  }\n\n}\n\n;\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 1\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n\n  addValue() {\n    this.setState({\n      value: this.state.value + 1\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }\n    }, \"Add\"), /*#__PURE__*/React.createElement(OnlyEvens, {\n      value: this.state.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n; //Events\n// class Football extends React.Component {\n//   shoot() {\n//     alert(\"Great Shot!\");\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.shoot}>Take the shot!</button>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Football />, document.getElementById('root'));\n//\n// class Football extends React.Component {\n//   shoot(a, b) {\n//     alert(a);\n//     alert(b.type) //b refers to the React event that triggered the function, in this case the 'click' event\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.shoot.bind(this, \"Goal\")}>Take the shot!</button>\n//     );\n//   }\n// }\n// ReactDOM.render(<Football />, document.getElementById('root'));\n// Forms\n// class MyForm extends React.Component {\n//   hello(){\n//     var nam = document.getElementById(\"name\").value;\n//     alert(\"Hello \"+nam);\n//   }\n//\n//   render() {\n//     return (\n//       <form>\n//         <h1>Hello</h1>\n//         <p>Enter your name:</p>\n//         <input type=\"text\" id=\"name\"/>\n//         <button onClick={this.hello}>Submit</button>\n//       </form>\n//     );\n//   }\n// }\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//Handle changes\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { username: '' };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({username: event.target.value});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//conditional rendering\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { username: '' };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({username: event.target.value});\n//   }\n//   render() {\n//     let header = '';\n//     if (this.state.username) {\n//       header = <h1>Hello {this.state.username}</h1>;\n//     } else {\n//       header = '';\n//     }\n//     return (\n//       <form>\n//       {header}\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//submitting and validating Forms\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       username: '',\n//       age: null,\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     let nam = event.target.name;\n//     let val = event.target.value;\n//     if (nam === \"age\") {\n//       if (!Number(val)) {\n//         alert(\"Your age must be a number\");\n//       }\n//     }\n//     this.setState({[nam]: val});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username} {this.state.age}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         name='username'\n//         onChange={this.myChangeHandler}\n//       />\n//       <p>Enter your age:</p>\n//       <input\n//         type='text'\n//         name='age'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//drop down menu\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       mycar: 'Volvo',\n//       choice: ''\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({choice: event.target.value});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>You selected {this.state.choice}</h1>\n//       <select value={this.state.mycar} onChange={this.myChangeHandler}>\n//         <option value=\"Ford\">Ford</option>\n//         <option value=\"Volvo\">Volvo</option>\n//         <option value=\"Fiat\">Fiat</option>\n//       </select>\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//CSS\n// class MyHeader extends React.Component {\n//   render() {\n//     const mystyle = {\n//       color: \"white\",\n//       backgroundColor: \"DodgerBlue\",\n//       padding: \"10px\",\n//       fontFamily: \"Arial\"\n//     };\n//     return (\n//       <div>\n//       <h1 style={mystyle}>Hello Style!</h1>\n//       <p>Add a little style!</p>\n//       </div>\n//     );\n//   }\n// }\n// ReactDOM.render(<MyHeader />, document.getElementById('root'));","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/React/myfirstreact/src/index.js"],"names":["React","ReactDOM","OnlyEvens","Component","constructor","props","shouldComponentUpdate","nextProps","nextState","console","log","value","componentDidUpdate","render","Controller","state","addValue","bind","setState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArwBF,KAAK,CAACG,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AAEC,QAAGH,SAAS,CAACI,KAAV,GAAgB,CAAhB,KAAoB,CAAvB,EAAyB;AACvB,aAAO,IAAP;AACD,KAFD,MAGK;AACH,aAAO,KAAP;AACD;AAEH;;AAEDC,EAAAA,kBAAkB,GAAG;AACnBH,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWM,KAAvB;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKR,KAAL,CAAWM,KAAhB,CAAP;AACD;;AAxBqC;;AAyBvC;;AAED,MAAMG,UAAN,SAAyBd,KAAK,CAACG,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKU,KAAL,GAAa;AACXJ,MAAAA,KAAK,EAAE;AADI,KAAb;AAGA,SAAKK,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AACDD,EAAAA,QAAQ,GAAG;AACT,SAAKE,QAAL,CAAc;AACZP,MAAAA,KAAK,EAAE,KAAKI,KAAL,CAAWJ,KAAX,GAAmB;AADd,KAAd;AAGD;;AACDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,OAAO,EAAE,KAAKG,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWJ,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AApBsC;;AAqBxsourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n//This is when the component is defined in some other file.\n// import Car from './app.js';\n\n\n// render JSX component\n// const JSX = (\n//   <div>\n//     <h1 > Hello World < /h1>\n//     <p> Lets render this to the DOM < /p>\n//   </div>\n// );\n// ReactDOM.render(JSX, document.getElementById('root'));\n//\n\n// rendering stateless functional component\n// const ChildComponent = () => {\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>I am the child</p>\n// \t\t</div>\n// \t);\n// };\n//\n// ReactDOM.render(<ChildComponent />, document.getElementById('root'));\n\n\n//React component\n// class Car extends React.Component {\n//   render() {\n//     return <h2>Hi, I am a Car!</h2>;\n//   }\n// }\n\n//constructor component:\n// class Car extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {color: \"red\"};\n//   }\n//   render() {\n//     return <h2>I am a {this.state.color} Car!</h2>;\n//   }\n// }\n\n//Components inside component\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a Car!</h2>;\n//   }\n// }\n// class Garage extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//       <h1>Who lives in my Garage?</h1>\n//       <Car />\n//       </div>\n//     );\n//   }\n// }\n\n\n//React props\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a {this.props.model}!</h2>;\n//   }\n// }\n\n//If the component has a constructor in it then props should be passed through super()\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return <h2>I am a Car, a {this.props.model}!</h2>;\n//   }\n// }\n\n// ReactDOM.render(<Car model=\"Mustang\"/>, document.getElementById('root'));\n\n\n//passing an array using props\n// const List = (props) => {\n//   return <p>{props.tasks.join(\", \")}</p>\n// };\n//\n// class ToDo extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>To Do Lists</h1>\n//         <h2>Today</h2>\n//         <List tasks={[\"Code\", \"Eat\", \"Code\"]} />\n//         <h2>Tomorrow</h2>\n//         <List tasks={[\"Code\", \"Code\", \"Eat\"]}/>\n//       </div>\n//     );\n//   }\n// };\n// ReactDOM.render(<ToDo />, document.getElementById('root'))\n\n\n//State object\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       brand: \"Ford\",\n//       model: \"Mustang\",\n//       color: \"red\",\n//       year: 1964\n//     };\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>My {this.state.brand}</h1>\n//         <p>\n//           It is a {this.state.color} {this.state.model}\n//           from {this.state.year}.\n//         </p>\n//       </div>\n//     );\n//   }\n// }\n\n//change state object\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       brand: \"Ford\",\n//       model: \"Mustang\",\n//       color: \"red\",\n//       year: 1964\n//     };\n//\n//     // this.changeColor = this.changeColor.bind(this)\n//   }\n//\n//   changeColor = () => {\n//     this.setState({color: \"blue\"});\n//   }\n//\n//   // changeColor() {\n//   //   this.setState({color: \"blue\"});\n//   // }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>My {this.state.brand}</h1>\n//         <p>\n//           It is a {this.state.color} {this.state.model} from {this.state.year}.\n//         </p>\n//         <button type=\"button\" onClick={this.changeColor}>Change color</button>\n//       </div>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Car />, document.getElementById('root'));\n\n\n\n// Change state based on the previous state, in this case do visibility toggle\n// class MyComponent extends React.Component {\n//\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       visibility: false\n//     }\n//\n//     this.toggleVisibility = this.toggleVisibility.bind(this)\n//   }\n//\n//   toggleVisibility() {\n//     this.setState(state => {\n//       if(state.visibility===true){\n//         return {visibility: false}\n//       }\n//       else {\n//         return {visibility: true}\n//       }\n//     });\n//   }\n//\n//   render() {\n//     if(this.state.visibility) {\n//       return (\n//         <div>\n//           <button onClick = {this.toggleVisibility}>Click Me</button>\n//           <h1>Heyy I'm visible</h1>\n//         </div>\n//       )\n//     }\n//     else {\n//       return (\n//         <div>\n//           <button onClick = {this.toggleVisibility}>Click Me</button>\n//         </div>\n//       )\n//     }\n//   }\n//\n// }\n//\n// ReactDOM.render(<MyComponent />, document.getElementById('root'));\n\n\n\n// using setState to dynamically display input text:\n// class ControlledInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       input: ''\n//     };\n//\n//     this.handleChange = this.handleChange.bind(this)\n//   }\n//\n//   handleChange(event) {\n//     this.setState({input: event.target.value});\n//     console.log(typeof event);\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <input value = {this.state.input} onChange = {this.handleChange}></input>\n//         <h4>Controlled Input:</h4>\n//         <p>{this.state.input}</p>\n//       </div>\n//     );\n//   }\n// };\n\n\n// Passing state as props to child react components:\n// class MyApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       name: 'CamperBot'\n//     }\n//   }\n//   render() {\n//     return (\n//        <div>\n//          <Navbar name = {this.state.name}/>\n//        </div>\n//     );\n//   }\n// };\n//\n// class Navbar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//     <div>\n//       <h1>Hello, my name is: {this.props.name} </h1>\n//     </div>\n//     );\n//   }\n// };\n\n\n// Passing methods / handler functions to child component as props:\n// class MyApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       inputValue: ''\n//     }\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   handleChange(event) {\n//     this.setState({\n//       inputValue: event.target.value\n//     });\n//   }\n//\n//   render() {\n//     return (\n//        <div>\n//         { /* change code below this line */ }\n//         <GetInput input={this.state.inputValue} handleChange = {this.handleChange}/>\n//         <RenderInput input={this.state.inputValue}/>\n//         { /* change code above this line */ }\n//        </div>\n//     );\n//   }\n// };\n//\n// class GetInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h3>Get Input:</h3>\n//         <input value={this.props.input} onChange={this.props.handleChange}/>\n//       </div>\n//     );\n//   }\n// };\n//\n// class RenderInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h3>Input Render:</h3>\n//         <p>{this.props.input}</p>\n//       </div>\n//     );\n//   }\n// };\n//\n// ReactDOM.render(<MyApp />, document.getElementById('root'));\n\n\n//getDerivedStateFromProps\n// class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n//   static getDerivedStateFromProps(props, state) {\n//     return {favoritecolor: props.favcol };\n//   }\n//   render() {\n//     return (\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Header favcol=\"blue\"/>, document.getElementById('root'));\n\n\n// componentWillMount\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   componentWillMount() {\n//     // change code below this line\n//     console.log(\"What is happening?\")\n//     // change code above this line\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Why should I use this??</h1>\n//         <h1>My name {this.props.name}</h1>\n//       </div>\n//     )\n//   }\n// };\n// ReactDOM.render(<MyComponent name=\"Lily\"/>, document.getElementById('root'));\n\n\n// componentDidMount and componentWillUnmount\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       message: ''\n//     };\n//     this.handleEnter = this.handleEnter.bind(this);\n//     this.handleKeyPress = this.handleKeyPress.bind(this);\n//   }\n//\n//   componentDidMount() {\n//     document.addEventListener(\"keydown\", this.handleKeyPress)\n//   }\n//\n//   componentWillUnmount() {\n//     document.removeEventListener(\"keydown\", this.handleKeyPress)\n//   }\n//\n//   handleEnter() {\n//     this.setState({\n//       message: this.state.message + 'You pressed the enter key! '\n//     });\n//   }\n//\n//   handleKeyPress(event) {\n//     if (event.keyCode === 13) {\n//       this.handleEnter();\n//     }\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>{this.state.message}</h1>\n//       </div>\n//     );\n//   }\n// };\n\n\n\n//componentDidMount\n// class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n//   componentDidMount() {\n//     setTimeout(() => {\n//       this.setState({favoritecolor: \"yellow\"})\n//     }, 1000)\n//   }\n//   render() {\n//     return (\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Header />, document.getElementById('root'));\n\n\n\n//shouldComponentUpdate and componentDidUpdate\nclass OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n\n     if(nextProps.value%2===0){\n       return true;\n     }\n     else {\n       return false;\n     }\n\n  }\n\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n    console.log(this.props.value);\n  }\n\n  render() {\n    return <h1>{this.props.value}</h1>\n  }\n};\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 1\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState({\n      value: this.state.value + 1\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value}/>\n      </div>\n    );\n  }\n};\n\n\n//Events\n// class Football extends React.Component {\n//   shoot() {\n//     alert(\"Great Shot!\");\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.shoot}>Take the shot!</button>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Football />, document.getElementById('root'));\n\n//\n// class Football extends React.Component {\n//   shoot(a, b) {\n//     alert(a);\n//     alert(b.type) //b refers to the React event that triggered the function, in this case the 'click' event\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.shoot.bind(this, \"Goal\")}>Take the shot!</button>\n//     );\n//   }\n// }\n// ReactDOM.render(<Football />, document.getElementById('root'));\n\n\n// Forms\n// class MyForm extends React.Component {\n//   hello(){\n//     var nam = document.getElementById(\"name\").value;\n//     alert(\"Hello \"+nam);\n//   }\n//\n//   render() {\n//     return (\n//       <form>\n//         <h1>Hello</h1>\n//         <p>Enter your name:</p>\n//         <input type=\"text\" id=\"name\"/>\n//         <button onClick={this.hello}>Submit</button>\n//       </form>\n//     );\n//   }\n// }\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//Handle changes\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { username: '' };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({username: event.target.value});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//conditional rendering\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { username: '' };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({username: event.target.value});\n//   }\n//   render() {\n//     let header = '';\n//     if (this.state.username) {\n//       header = <h1>Hello {this.state.username}</h1>;\n//     } else {\n//       header = '';\n//     }\n//     return (\n//       <form>\n//       {header}\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//submitting and validating Forms\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       username: '',\n//       age: null,\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     let nam = event.target.name;\n//     let val = event.target.value;\n//     if (nam === \"age\") {\n//       if (!Number(val)) {\n//         alert(\"Your age must be a number\");\n//       }\n//     }\n//     this.setState({[nam]: val});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username} {this.state.age}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         name='username'\n//         onChange={this.myChangeHandler}\n//       />\n//       <p>Enter your age:</p>\n//       <input\n//         type='text'\n//         name='age'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//drop down menu\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       mycar: 'Volvo',\n//       choice: ''\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({choice: event.target.value});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>You selected {this.state.choice}</h1>\n//       <select value={this.state.mycar} onChange={this.myChangeHandler}>\n//         <option value=\"Ford\">Ford</option>\n//         <option value=\"Volvo\">Volvo</option>\n//         <option value=\"Fiat\">Fiat</option>\n//       </select>\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//CSS\n// class MyHeader extends React.Component {\n//   render() {\n//     const mystyle = {\n//       color: \"white\",\n//       backgroundColor: \"DodgerBlue\",\n//       padding: \"10px\",\n//       fontFamily: \"Arial\"\n//     };\n//     return (\n//       <div>\n//       <h1 style={mystyle}>Hello Style!</h1>\n//       <p>Add a little style!</p>\n//       </div>\n//     );\n//   }\n// }\n// ReactDOM.render(<MyHeader />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}