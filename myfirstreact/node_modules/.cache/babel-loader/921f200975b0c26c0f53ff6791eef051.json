{"ast":null,"code":"var _jsxFileName = \"/Users/simranbhake/Desktop/ProjectProgress/React/myfirstreact/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; //This is when the component is defined in some other file.\n// import Car from './app.js';\n// render JSX component\n// const JSX = (\n//   <div>\n//     <h1 > Hello World < /h1>\n//     <p> Lets render this to the DOM < /p>\n//   </div>\n// );\n// ReactDOM.render(JSX, document.getElementById('root'));\n//\n// rendering stateless functional component\n// const ChildComponent = () => {\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>I am the child</p>\n// \t\t</div>\n// \t);\n// };\n//\n// ReactDOM.render(<ChildComponent />, document.getElementById('root'));\n//React component\n// class Car extends React.Component {\n//   render() {\n//     return <h2>Hi, I am a Car!</h2>;\n//   }\n// }\n//constructor component:\n// class Car extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {color: \"red\"};\n//   }\n//   render() {\n//     return <h2>I am a {this.state.color} Car!</h2>;\n//   }\n// }\n//Components inside component\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a Car!</h2>;\n//   }\n// }\n// class Garage extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//       <h1>Who lives in my Garage?</h1>\n//       <Car />\n//       </div>\n//     );\n//   }\n// }\n//React props\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a {this.props.model}!</h2>;\n//   }\n// }\n//If the component has a constructor in it then props should be passed through super()\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return <h2>I am a Car, a {this.props.model}!</h2>;\n//   }\n// }\n// ReactDOM.render(<Car model=\"Mustang\"/>, document.getElementById('root'));\n//passing an array using props\n// const List = (props) => {\n//   return <p>{props.tasks.join(\", \")}</p>\n// };\n//\n// class ToDo extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>To Do Lists</h1>\n//         <h2>Today</h2>\n//         <List tasks={[\"Code\", \"Eat\", \"Code\"]} />\n//         <h2>Tomorrow</h2>\n//         <List tasks={[\"Code\", \"Code\", \"Eat\"]}/>\n//       </div>\n//     );\n//   }\n// };\n// ReactDOM.render(<ToDo />, document.getElementById('root'))\n//State object\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       brand: \"Ford\",\n//       model: \"Mustang\",\n//       color: \"red\",\n//       year: 1964\n//     };\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>My {this.state.brand}</h1>\n//         <p>\n//           It is a {this.state.color} {this.state.model}\n//           from {this.state.year}.\n//         </p>\n//       </div>\n//     );\n//   }\n// }\n//change state object\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       brand: \"Ford\",\n//       model: \"Mustang\",\n//       color: \"red\",\n//       year: 1964\n//     };\n//\n//     // this.changeColor = this.changeColor.bind(this)\n//   }\n//\n//   changeColor = () => {\n//     this.setState({color: \"blue\"});\n//   }\n//\n//   // changeColor() {\n//   //   this.setState({color: \"blue\"});\n//   // }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>My {this.state.brand}</h1>\n//         <p>\n//           It is a {this.state.color} {this.state.model} from {this.state.year}.\n//         </p>\n//         <button type=\"button\" onClick={this.changeColor}>Change color</button>\n//       </div>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Car />, document.getElementById('root'));\n// Change state based on the previous state, in this case do visibility toggle\n// class MyComponent extends React.Component {\n//\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       visibility: false\n//     }\n//\n//     this.toggleVisibility = this.toggleVisibility.bind(this)\n//   }\n//\n//   toggleVisibility() {\n//     this.setState(state => {\n//       if(state.visibility===true){\n//         return {visibility: false}\n//       }\n//       else {\n//         return {visibility: true}\n//       }\n//     });\n//   }\n//\n//   render() {\n//     if(this.state.visibility) {\n//       return (\n//         <div>\n//           <button onClick = {this.toggleVisibility}>Click Me</button>\n//           <h1>Heyy I'm visible</h1>\n//         </div>\n//       )\n//     }\n//     else {\n//       return (\n//         <div>\n//           <button onClick = {this.toggleVisibility}>Click Me</button>\n//         </div>\n//       )\n//     }\n//   }\n//\n// }\n//\n// ReactDOM.render(<MyComponent />, document.getElementById('root'));\n// using setState to dynamically display input text:\n// class ControlledInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       input: ''\n//     };\n//\n//     this.handleChange = this.handleChange.bind(this)\n//   }\n//\n//   handleChange(event) {\n//     this.setState({input: event.target.value});\n//     console.log(typeof event);\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <input value = {this.state.input} onChange = {this.handleChange}></input>\n//         <h4>Controlled Input:</h4>\n//         <p>{this.state.input}</p>\n//       </div>\n//     );\n//   }\n// };\n// simple counter\n// class Counter extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       count: 0\n//     }\n//\n//     this.increment = this.increment.bind(this);\n//     this.decrement = this.decrement.bind(this);\n//     this.reset = this.reset.bind(this)\n//   }\n//\n//   increment() {\n//     this.setState(state => {\n//       return {count: state.count + 1}\n//     });\n//     console.log(this.state.count)\n//   }\n//\n//   decrement() {\n//     this.setState(state => {\n//       return {count: state.count - 1}\n//     });\n//     console.log(this.state.count)\n//   }\n//\n//   reset() {\n//     this.setState({count: 0})\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <button className='inc' onClick={this.increment}>Increment</button>\n//         <button className='dec' onClick={this.decrement}>Decrement</button>\n//         <button className='reset' onClick={this.reset}>Reset</button>\n//         {this.state.count > -1 && <h1>Current Count: {this.state.count}</h1>}\n//         {this.state.count < 0 && <h1>Negative!!!</h1>}\n//       </div>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Counter />, document.getElementById('root'))\n// Passing state as props to child react components:\n// class MyApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       name: 'CamperBot'\n//     }\n//   }\n//   render() {\n//     return (\n//        <div>\n//          <Navbar name = {this.state.name}/>\n//        </div>\n//     );\n//   }\n// };\n//\n// class Navbar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//     <div>\n//       <h1>Hello, my name is: {this.props.name} </h1>\n//     </div>\n//     );\n//   }\n// };\n// Passing methods / handler functions to child component as props:\n// class MyApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       inputValue: ''\n//     }\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   handleChange(event) {\n//     this.setState({\n//       inputValue: event.target.value\n//     });\n//   }\n//\n//   render() {\n//     return (\n//        <div>\n//         { /* change code below this line */ }\n//         <GetInput input={this.state.inputValue} handleChange = {this.handleChange}/>\n//         <RenderInput input={this.state.inputValue}/>\n//         { /* change code above this line */ }\n//        </div>\n//     );\n//   }\n// };\n//\n// class GetInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h3>Get Input:</h3>\n//         <input value={this.props.input} onChange={this.props.handleChange}/>\n//       </div>\n//     );\n//   }\n// };\n//\n// class RenderInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h3>Input Render:</h3>\n//         <p>{this.props.input}</p>\n//       </div>\n//     );\n//   }\n// };\n//\n// ReactDOM.render(<MyApp />, document.getElementById('root'));\n//getDerivedStateFromProps\n// class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n//   static getDerivedStateFromProps(props, state) {\n//     return {favoritecolor: props.favcol };\n//   }\n//   render() {\n//     return (\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Header favcol=\"blue\"/>, document.getElementById('root'));\n// componentWillMount\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   componentWillMount() {\n//     // change code below this line\n//     console.log(\"What is happening?\")\n//     // change code above this line\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Why should I use this??</h1>\n//         <h1>My name {this.props.name}</h1>\n//       </div>\n//     )\n//   }\n// };\n// ReactDOM.render(<MyComponent name=\"Lily\"/>, document.getElementById('root'));\n// componentDidMount and componentWillUnmount\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       message: ''\n//     };\n//     this.handleEnter = this.handleEnter.bind(this);\n//     this.handleKeyPress = this.handleKeyPress.bind(this);\n//   }\n//\n//   componentDidMount() {\n//     document.addEventListener(\"keydown\", this.handleKeyPress)\n//   }\n//\n//   componentWillUnmount() {\n//     document.removeEventListener(\"keydown\", this.handleKeyPress)\n//   }\n//\n//   handleEnter() {\n//     this.setState({\n//       message: this.state.message + 'You pressed the enter key! '\n//     });\n//   }\n//\n//   handleKeyPress(event) {\n//     if (event.keyCode === 13) {\n//       this.handleEnter();\n//     }\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>{this.state.message}</h1>\n//       </div>\n//     );\n//   }\n// };\n//componentDidMount\n// class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n//   componentDidMount() {\n//     setTimeout(() => {\n//       this.setState({favoritecolor: \"yellow\"})\n//     }, 1000)\n//   }\n//   render() {\n//     return (\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Header />, document.getElementById('root'));\n//shouldComponentUpdate and componentDidUpdate\n// class OnlyEvens extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   shouldComponentUpdate(nextProps, nextState) {\n//     console.log('Should I update?');\n//     if(nextProps.value%2===0){\n//       return true;\n//      }\n//     else {\n//       return false;\n//      }\n//   }\n//   componentDidUpdate() {\n//     console.log('Component re-rendered.');\n//     console.log(this.props.value);\n//   }\n//   render() {\n//     return <h1>{this.props.value}</h1>\n//   }\n// };\n// class Controller extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       value: 1\n//     };\n//     this.addValue = this.addValue.bind(this);\n//   }\n//   addValue() {\n//     this.setState({\n//       value: this.state.value + 1\n//     });\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <button onClick={this.addValue}>Add</button>\n//         <OnlyEvens value={this.state.value}/>\n//       </div>\n//     );\n//   }\n// };\n// Advanced JS in react render method\n// const inputStyle = {\n//   width: 235,\n//   margin: 5\n// }\n//\n// class MagicEightBall extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       userInput: '',\n//       randomIndex: ''\n//     }\n//     this.ask = this.ask.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   ask() {\n//     if (this.state.userInput) {\n//       this.setState({\n//         randomIndex: Math.floor(Math.random() * 20),\n//         userInput: ''\n//       });\n//     }\n//   }\n//\n//   handleChange(event) {\n//     this.setState({\n//       userInput: event.target.value\n//     });\n//   }\n//\n//   render() {\n//     const possibleAnswers = [\n//       'It is certain',\n//       'It is decidedly so',\n//       'Without a doubt',\n//       'Yes, definitely',\n//       'You may rely on it',\n//       'As I see it, yes',\n//       'Outlook good',\n//       'Yes',\n//       'Signs point to yes',\n//       'Reply hazy try again',\n//       'Ask again later',\n//       'Better not tell you now',\n//       'Cannot predict now',\n//       'Concentrate and ask again',\n//       'Dont count on it',\n//       'My reply is no',\n//       'My sources say no',\n//       'Most likely',\n//       'Outlook not so good',\n//       'Very doubtful'\n//     ];\n//     const answer = possibleAnswers[this.state.randomIndex] // << change code here\n//     return (\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={this.state.userInput}\n//           onChange={this.handleChange}\n//           style={inputStyle} /><br />\n//         <button onClick={this.ask}>Ask the Magic Eight Ball!\n//         </button>\n//         <br />\n//         <h3>Answer:</h3>\n//         <p>\n//           { /* change code below this line */ }\n//           {answer}\n//           { /* change code above this line */ }\n//         </p>\n//       </div>\n//     );\n//   }\n// };\n//\n// ReactDOM.render(<MagicEightBall />, document.getElementById('root'));\n//Events\n// class Football extends React.Component {\n//   shoot(a, b) {\n//     alert(a);\n//     alert(b.type) //b refers to the React event that triggered the function, in this case the 'click' event\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.shoot.bind(this, \"Goal\")}>Take the shot!</button>\n//     );\n//   }\n// }\n// ReactDOM.render(<Football />, document.getElementById('root'));\n// Forms\n// class MyForm extends React.Component {\n//   hello(){\n//     var nam = document.getElementById(\"name\").value;\n//     alert(\"Hello \"+nam);\n//   }\n//\n//   render() {\n//     return (\n//       <form>\n//         <h1>Hello</h1>\n//         <p>Enter your name:</p>\n//         <input type=\"text\" id=\"name\"/>\n//         <button onClick={this.hello}>Submit</button>\n//       </form>\n//     );\n//   }\n// }\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//Handle changes\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { username: '' };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({username: event.target.value});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//conditional rendering using if-else\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       display: true\n//     }\n//     this.toggleDisplay = this.toggleDisplay.bind(this);\n//   }\n//\n//   toggleDisplay() {\n//     this.setState({\n//       display: !this.state.display\n//     });\n//   }\n//\n//   render() {\n//     if(this.state.display === true){\n//       return (\n//        <div>\n//          <button onClick={this.toggleDisplay}>Toggle Display</button>\n//          <h1>Displayed!</h1>\n//        </div>\n//       );\n//     }\n//     else {\n//       return (\n//        <div>\n//          <button onClick={this.toggleDisplay}>Toggle Display</button>\n//        </div>\n//       );\n//     }\n//   }\n// };\n//\n// ReactDOM.render(<MyComponent />, document.getElementById('root'));\n// Conditional rendering using props:\n// class Results extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <h1>\n//       {\n//         this.props.fiftyFifty ?\n//         \"You Win!\" :\n//         \"You Lose!\"\n//       }\n//       </h1>\n//     )\n//   };\n// };\n//\n// class GameOfChance extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       counter: 1\n//     }\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//\n//   handleClick() {\n//     this.setState({\n//       counter: this.state.counter + 1\n//     });\n//   }\n//\n//   render() {\n//     const expression = Math.random() >= .5\n//     return (\n//       <div>\n//         <button onClick={this.handleClick}>Play Again</button>\n//         { /* change code below this line */ }\n//         <Results fiftyFifty={expression}/>\n//         { /* change code above this line */ }\n//         <p>{'Turn: ' + this.state.counter}</p>\n//       </div>\n//     );\n//   }\n// };\n//submitting and validating Forms\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       username: '',\n//       age: null,\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     let nam = event.target.name;\n//     let val = event.target.value;\n//     if (nam === \"age\") {\n//       if (!Number(val)) {\n//         alert(\"Your age must be a number\");\n//       }\n//     }\n//     this.setState({[nam]: val});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username} {this.state.age}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         name='username'\n//         onChange={this.myChangeHandler}\n//       />\n//       <p>Enter your age:</p>\n//       <input\n//         type='text'\n//         name='age'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//drop down menu\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       mycar: 'Volvo',\n//       choice: ''\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({choice: event.target.value});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>You selected {this.state.choice}</h1>\n//       <select value={this.state.mycar} onChange={this.myChangeHandler}>\n//         <option value=\"Ford\">Ford</option>\n//         <option value=\"Volvo\">Volvo</option>\n//         <option value=\"Fiat\">Fiat</option>\n//       </select>\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n//CSS\n// class MyHeader extends React.Component {\n//   render() {\n//     const mystyle = {\n//       color: \"white\",\n//       backgroundColor: \"DodgerBlue\",\n//       padding: \"10px\",\n//       fontFamily: \"Arial\"\n//     };\n//     return (\n//       <div>\n//       <h1 style={mystyle}>Hello Style!</h1>\n//       <p>Add a little style!</p>\n//       </div>\n//     );\n//   }\n// }\n// ReactDOM.render(<MyHeader />, document.getElementById('root'));\n// changing inline css based on component state\n// class GateKeeper extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       input: ''\n//     };\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   handleChange(event) {\n//     this.setState({ input: event.target.value })\n//   }\n//   render() {\n//     let inputStyle = {\n//       border: '1px solid black'\n//     };\n//\n//     let noStyle = {\n//       border: '3px solid red'\n//     }\n//\n//     return (\n//       <div>\n//         <h3>Don't Type Too Much:</h3>\n//         <input\n//           type=\"text\"\n//           style={\n//             this.state.input.length > 15 ?\n//             noStyle :\n//             inputStyle}\n//           value={this.state.input}\n//           onChange={this.handleChange} />\n//       </div>\n//     );\n//   }\n// };\n// Dynamically render elements using Array.map()\n// const textAreaStyles = {\n//   width: 235,\n//   margin: 5\n// };\n//\n// class MyToDoList extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       userInput: '',\n//       toDoList: []\n//     }\n//\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   handleSubmit() {\n//     const itemsArray = this.state.userInput.split(',');\n//     this.setState({\n//       toDoList: itemsArray\n//     });\n//   }\n//\n//   handleChange(e) {\n//     this.setState({\n//       userInput: e.target.value\n//     });\n//   }\n//\n//   render() {\n//     const items = this.state.toDoList.map(i => <li>{i}</li>);\n//     return (\n//       <div>\n//         <textarea\n//           onChange={this.handleChange}\n//           value={this.state.userInput}\n//           style={textAreaStyles}\n//           placeholder=\"Separate Items With Commas\" />\n//         <br />\n//         <button onClick={this.handleSubmit}>Create List</button>\n//         <h1>My \"To Do\" List:</h1>\n//         <ul>\n//           {items}\n//         </ul>\n//       </div>\n//     );\n//   }\n// };\n// Array.filter()\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       users: [\n//         {\n//           username: 'Jeff',\n//           online: true\n//         },\n//         {\n//           username: 'Alan',\n//           online: false\n//         },\n//         {\n//           username: 'Mary',\n//           online: true\n//         },\n//         {\n//           username: 'Jim',\n//           online: false\n//         },\n//         {\n//           username: 'Sara',\n//           online: true\n//         },\n//         {\n//           username: 'Laura',\n//           online: true\n//         }\n//       ]\n//     }\n//   }\n//   render() {\n//     const usersOnline = this.state.users.filter(user => user.online==true);\n//     const renderOnline = usersOnline.map(\n//       i => <li key={i.username}>{i.username}</li>\n//       );\n//     return (\n//        <div>\n//          <h1>Current Online Users:</h1>\n//          <ul>\n//            {renderOnline}\n//          </ul>\n//        </div>\n//     );\n//   }\n// };\n//  Passing state as a props to child component, the parent/child should re-render after a change in state by child component\n// class Sibling extends React.Component {\n//   constructor(props){\n//     super(props);\n//\n//     this.state = {\n//       count: this.props.count\n//     }\n//\n//     this.hincrement = this.hincrement.bind(this);\n//   }\n//\n//   hincrement(){\n//     this.setState(state => {\n//       const count = state.count + 100\n//\n//       return {\n//         count\n//       };\n//     });\n//   }\n//\n//   render() {\n//     return (\n//       <button onClick={this.hincrement}>{this.state.count}</button>\n//     );\n//   }\n// }\n\nclass Child extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: this.props.count\n    };\n    this.increment = this.increment.bind(this);\n  }\n\n  increment() {\n    this.setState(state => {\n      const count = state.count + 1;\n      return {\n        count\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        fontSize: \"30px\"\n      },\n      onClick: this.increment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 9\n      }\n    }, this.state.count), /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        fontSize: \"30px\"\n      },\n      onClick: this.increment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 9\n      }\n    }, \"To update parent state\"));\n  }\n\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    console.log(this.state.count);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 9\n      }\n    }, \"Counter\"), /*#__PURE__*/React.createElement(Child, {\n      count: this.state.count,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Parent, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 1080,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/React/myfirstreact/src/index.js"],"names":["React","ReactDOM","Child","Component","constructor","props","state","count","increment","bind","setState","render","fontSize","Parent","console","log","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAAroBF,KAAK,CAACG,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE;AADP,KAAb;AAIA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAEDD,EAAAA,SAAS,GAAE;AACT,SAAKE,QAAL,CAAcJ,KAAK,IAAI;AACrB,YAAMC,KAAK,GAAGD,KAAK,CAACC,KAAN,GAAc,CAA5B;AAEA,aAAO;AACLA,QAAAA;AADK,OAAP;AAGD,KAND;AAOD;;AAGDI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,KAAK,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAf;AAAmC,MAAA,OAAO,EAAE,KAAKJ,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6D,KAAKF,KAAL,CAAWC,KAAxE,CADF,eAEE;AAAQ,MAAA,KAAK,EAAE;AAACK,QAAAA,QAAQ,EAAE;AAAX,OAAf;AAAmC,MAAA,OAAO,EAAE,KAAKJ,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFF,CADF;AAMD;;AA7BiC;;AAiCpC,MAAMK,MAAN,SAAqBb,KAAK,CAACG,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDI,EAAAA,MAAM,GAAG;AACPG,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWC,KAAvB;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAjBkC;;AAoBrCN,QAAQ,CAACU,MAAT,eAAgB,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA4BK,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n//This is when the component is defined in some other file.\n// import Car from './app.js';\n\n\n// render JSX component\n// const JSX = (\n//   <div>\n//     <h1 > Hello World < /h1>\n//     <p> Lets render this to the DOM < /p>\n//   </div>\n// );\n// ReactDOM.render(JSX, document.getElementById('root'));\n//\n\n// rendering stateless functional component\n// const ChildComponent = () => {\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>I am the child</p>\n// \t\t</div>\n// \t);\n// };\n//\n// ReactDOM.render(<ChildComponent />, document.getElementById('root'));\n\n\n//React component\n// class Car extends React.Component {\n//   render() {\n//     return <h2>Hi, I am a Car!</h2>;\n//   }\n// }\n\n//constructor component:\n// class Car extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {color: \"red\"};\n//   }\n//   render() {\n//     return <h2>I am a {this.state.color} Car!</h2>;\n//   }\n// }\n\n//Components inside component\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a Car!</h2>;\n//   }\n// }\n// class Garage extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//       <h1>Who lives in my Garage?</h1>\n//       <Car />\n//       </div>\n//     );\n//   }\n// }\n\n\n//React props\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a {this.props.model}!</h2>;\n//   }\n// }\n\n//If the component has a constructor in it then props should be passed through super()\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return <h2>I am a Car, a {this.props.model}!</h2>;\n//   }\n// }\n\n// ReactDOM.render(<Car model=\"Mustang\"/>, document.getElementById('root'));\n\n\n//passing an array using props\n// const List = (props) => {\n//   return <p>{props.tasks.join(\", \")}</p>\n// };\n//\n// class ToDo extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>To Do Lists</h1>\n//         <h2>Today</h2>\n//         <List tasks={[\"Code\", \"Eat\", \"Code\"]} />\n//         <h2>Tomorrow</h2>\n//         <List tasks={[\"Code\", \"Code\", \"Eat\"]}/>\n//       </div>\n//     );\n//   }\n// };\n// ReactDOM.render(<ToDo />, document.getElementById('root'))\n\n\n//State object\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       brand: \"Ford\",\n//       model: \"Mustang\",\n//       color: \"red\",\n//       year: 1964\n//     };\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>My {this.state.brand}</h1>\n//         <p>\n//           It is a {this.state.color} {this.state.model}\n//           from {this.state.year}.\n//         </p>\n//       </div>\n//     );\n//   }\n// }\n\n//change state object\n// class Car extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       brand: \"Ford\",\n//       model: \"Mustang\",\n//       color: \"red\",\n//       year: 1964\n//     };\n//\n//     // this.changeColor = this.changeColor.bind(this)\n//   }\n//\n//   changeColor = () => {\n//     this.setState({color: \"blue\"});\n//   }\n//\n//   // changeColor() {\n//   //   this.setState({color: \"blue\"});\n//   // }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>My {this.state.brand}</h1>\n//         <p>\n//           It is a {this.state.color} {this.state.model} from {this.state.year}.\n//         </p>\n//         <button type=\"button\" onClick={this.changeColor}>Change color</button>\n//       </div>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Car />, document.getElementById('root'));\n\n\n\n// Change state based on the previous state, in this case do visibility toggle\n// class MyComponent extends React.Component {\n//\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       visibility: false\n//     }\n//\n//     this.toggleVisibility = this.toggleVisibility.bind(this)\n//   }\n//\n//   toggleVisibility() {\n//     this.setState(state => {\n//       if(state.visibility===true){\n//         return {visibility: false}\n//       }\n//       else {\n//         return {visibility: true}\n//       }\n//     });\n//   }\n//\n//   render() {\n//     if(this.state.visibility) {\n//       return (\n//         <div>\n//           <button onClick = {this.toggleVisibility}>Click Me</button>\n//           <h1>Heyy I'm visible</h1>\n//         </div>\n//       )\n//     }\n//     else {\n//       return (\n//         <div>\n//           <button onClick = {this.toggleVisibility}>Click Me</button>\n//         </div>\n//       )\n//     }\n//   }\n//\n// }\n//\n// ReactDOM.render(<MyComponent />, document.getElementById('root'));\n\n\n\n// using setState to dynamically display input text:\n// class ControlledInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       input: ''\n//     };\n//\n//     this.handleChange = this.handleChange.bind(this)\n//   }\n//\n//   handleChange(event) {\n//     this.setState({input: event.target.value});\n//     console.log(typeof event);\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <input value = {this.state.input} onChange = {this.handleChange}></input>\n//         <h4>Controlled Input:</h4>\n//         <p>{this.state.input}</p>\n//       </div>\n//     );\n//   }\n// };\n\n\n// simple counter\n// class Counter extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       count: 0\n//     }\n//\n//     this.increment = this.increment.bind(this);\n//     this.decrement = this.decrement.bind(this);\n//     this.reset = this.reset.bind(this)\n//   }\n//\n//   increment() {\n//     this.setState(state => {\n//       return {count: state.count + 1}\n//     });\n//     console.log(this.state.count)\n//   }\n//\n//   decrement() {\n//     this.setState(state => {\n//       return {count: state.count - 1}\n//     });\n//     console.log(this.state.count)\n//   }\n//\n//   reset() {\n//     this.setState({count: 0})\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <button className='inc' onClick={this.increment}>Increment</button>\n//         <button className='dec' onClick={this.decrement}>Decrement</button>\n//         <button className='reset' onClick={this.reset}>Reset</button>\n//         {this.state.count > -1 && <h1>Current Count: {this.state.count}</h1>}\n//         {this.state.count < 0 && <h1>Negative!!!</h1>}\n//       </div>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Counter />, document.getElementById('root'))\n\n\n\n// Passing state as props to child react components:\n// class MyApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       name: 'CamperBot'\n//     }\n//   }\n//   render() {\n//     return (\n//        <div>\n//          <Navbar name = {this.state.name}/>\n//        </div>\n//     );\n//   }\n// };\n//\n// class Navbar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//     <div>\n//       <h1>Hello, my name is: {this.props.name} </h1>\n//     </div>\n//     );\n//   }\n// };\n\n\n// Passing methods / handler functions to child component as props:\n// class MyApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       inputValue: ''\n//     }\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   handleChange(event) {\n//     this.setState({\n//       inputValue: event.target.value\n//     });\n//   }\n//\n//   render() {\n//     return (\n//        <div>\n//         { /* change code below this line */ }\n//         <GetInput input={this.state.inputValue} handleChange = {this.handleChange}/>\n//         <RenderInput input={this.state.inputValue}/>\n//         { /* change code above this line */ }\n//        </div>\n//     );\n//   }\n// };\n//\n// class GetInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h3>Get Input:</h3>\n//         <input value={this.props.input} onChange={this.props.handleChange}/>\n//       </div>\n//     );\n//   }\n// };\n//\n// class RenderInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h3>Input Render:</h3>\n//         <p>{this.props.input}</p>\n//       </div>\n//     );\n//   }\n// };\n//\n// ReactDOM.render(<MyApp />, document.getElementById('root'));\n\n\n//getDerivedStateFromProps\n// class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n//   static getDerivedStateFromProps(props, state) {\n//     return {favoritecolor: props.favcol };\n//   }\n//   render() {\n//     return (\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Header favcol=\"blue\"/>, document.getElementById('root'));\n\n\n// componentWillMount\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   componentWillMount() {\n//     // change code below this line\n//     console.log(\"What is happening?\")\n//     // change code above this line\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Why should I use this??</h1>\n//         <h1>My name {this.props.name}</h1>\n//       </div>\n//     )\n//   }\n// };\n// ReactDOM.render(<MyComponent name=\"Lily\"/>, document.getElementById('root'));\n\n\n// componentDidMount and componentWillUnmount\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       message: ''\n//     };\n//     this.handleEnter = this.handleEnter.bind(this);\n//     this.handleKeyPress = this.handleKeyPress.bind(this);\n//   }\n//\n//   componentDidMount() {\n//     document.addEventListener(\"keydown\", this.handleKeyPress)\n//   }\n//\n//   componentWillUnmount() {\n//     document.removeEventListener(\"keydown\", this.handleKeyPress)\n//   }\n//\n//   handleEnter() {\n//     this.setState({\n//       message: this.state.message + 'You pressed the enter key! '\n//     });\n//   }\n//\n//   handleKeyPress(event) {\n//     if (event.keyCode === 13) {\n//       this.handleEnter();\n//     }\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>{this.state.message}</h1>\n//       </div>\n//     );\n//   }\n// };\n\n\n\n//componentDidMount\n// class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n//   componentDidMount() {\n//     setTimeout(() => {\n//       this.setState({favoritecolor: \"yellow\"})\n//     }, 1000)\n//   }\n//   render() {\n//     return (\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<Header />, document.getElementById('root'));\n\n\n\n//shouldComponentUpdate and componentDidUpdate\n// class OnlyEvens extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   shouldComponentUpdate(nextProps, nextState) {\n//     console.log('Should I update?');\n//     if(nextProps.value%2===0){\n//       return true;\n//      }\n//     else {\n//       return false;\n//      }\n//   }\n//   componentDidUpdate() {\n//     console.log('Component re-rendered.');\n//     console.log(this.props.value);\n//   }\n//   render() {\n//     return <h1>{this.props.value}</h1>\n//   }\n// };\n// class Controller extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       value: 1\n//     };\n//     this.addValue = this.addValue.bind(this);\n//   }\n//   addValue() {\n//     this.setState({\n//       value: this.state.value + 1\n//     });\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <button onClick={this.addValue}>Add</button>\n//         <OnlyEvens value={this.state.value}/>\n//       </div>\n//     );\n//   }\n// };\n\n\n// Advanced JS in react render method\n// const inputStyle = {\n//   width: 235,\n//   margin: 5\n// }\n//\n// class MagicEightBall extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       userInput: '',\n//       randomIndex: ''\n//     }\n//     this.ask = this.ask.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   ask() {\n//     if (this.state.userInput) {\n//       this.setState({\n//         randomIndex: Math.floor(Math.random() * 20),\n//         userInput: ''\n//       });\n//     }\n//   }\n//\n//   handleChange(event) {\n//     this.setState({\n//       userInput: event.target.value\n//     });\n//   }\n//\n//   render() {\n//     const possibleAnswers = [\n//       'It is certain',\n//       'It is decidedly so',\n//       'Without a doubt',\n//       'Yes, definitely',\n//       'You may rely on it',\n//       'As I see it, yes',\n//       'Outlook good',\n//       'Yes',\n//       'Signs point to yes',\n//       'Reply hazy try again',\n//       'Ask again later',\n//       'Better not tell you now',\n//       'Cannot predict now',\n//       'Concentrate and ask again',\n//       'Dont count on it',\n//       'My reply is no',\n//       'My sources say no',\n//       'Most likely',\n//       'Outlook not so good',\n//       'Very doubtful'\n//     ];\n//     const answer = possibleAnswers[this.state.randomIndex] // << change code here\n//     return (\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={this.state.userInput}\n//           onChange={this.handleChange}\n//           style={inputStyle} /><br />\n//         <button onClick={this.ask}>Ask the Magic Eight Ball!\n//         </button>\n//         <br />\n//         <h3>Answer:</h3>\n//         <p>\n//           { /* change code below this line */ }\n//           {answer}\n//           { /* change code above this line */ }\n//         </p>\n//       </div>\n//     );\n//   }\n// };\n//\n// ReactDOM.render(<MagicEightBall />, document.getElementById('root'));\n\n\n//Events\n// class Football extends React.Component {\n//   shoot(a, b) {\n//     alert(a);\n//     alert(b.type) //b refers to the React event that triggered the function, in this case the 'click' event\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.shoot.bind(this, \"Goal\")}>Take the shot!</button>\n//     );\n//   }\n// }\n// ReactDOM.render(<Football />, document.getElementById('root'));\n\n\n// Forms\n// class MyForm extends React.Component {\n//   hello(){\n//     var nam = document.getElementById(\"name\").value;\n//     alert(\"Hello \"+nam);\n//   }\n//\n//   render() {\n//     return (\n//       <form>\n//         <h1>Hello</h1>\n//         <p>Enter your name:</p>\n//         <input type=\"text\" id=\"name\"/>\n//         <button onClick={this.hello}>Submit</button>\n//       </form>\n//     );\n//   }\n// }\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//Handle changes\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { username: '' };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({username: event.target.value});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//conditional rendering using if-else\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       display: true\n//     }\n//     this.toggleDisplay = this.toggleDisplay.bind(this);\n//   }\n//\n//   toggleDisplay() {\n//     this.setState({\n//       display: !this.state.display\n//     });\n//   }\n//\n//   render() {\n//     if(this.state.display === true){\n//       return (\n//        <div>\n//          <button onClick={this.toggleDisplay}>Toggle Display</button>\n//          <h1>Displayed!</h1>\n//        </div>\n//       );\n//     }\n//     else {\n//       return (\n//        <div>\n//          <button onClick={this.toggleDisplay}>Toggle Display</button>\n//        </div>\n//       );\n//     }\n//   }\n// };\n//\n// ReactDOM.render(<MyComponent />, document.getElementById('root'));\n\n\n\n// Conditional rendering using props:\n// class Results extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <h1>\n//       {\n//         this.props.fiftyFifty ?\n//         \"You Win!\" :\n//         \"You Lose!\"\n//       }\n//       </h1>\n//     )\n//   };\n// };\n//\n// class GameOfChance extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       counter: 1\n//     }\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//\n//   handleClick() {\n//     this.setState({\n//       counter: this.state.counter + 1\n//     });\n//   }\n//\n//   render() {\n//     const expression = Math.random() >= .5\n//     return (\n//       <div>\n//         <button onClick={this.handleClick}>Play Again</button>\n//         { /* change code below this line */ }\n//         <Results fiftyFifty={expression}/>\n//         { /* change code above this line */ }\n//         <p>{'Turn: ' + this.state.counter}</p>\n//       </div>\n//     );\n//   }\n// };\n\n\n//submitting and validating Forms\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       username: '',\n//       age: null,\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     let nam = event.target.name;\n//     let val = event.target.value;\n//     if (nam === \"age\") {\n//       if (!Number(val)) {\n//         alert(\"Your age must be a number\");\n//       }\n//     }\n//     this.setState({[nam]: val});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username} {this.state.age}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         name='username'\n//         onChange={this.myChangeHandler}\n//       />\n//       <p>Enter your age:</p>\n//       <input\n//         type='text'\n//         name='age'\n//         onChange={this.myChangeHandler}\n//       />\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//drop down menu\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       mycar: 'Volvo',\n//       choice: ''\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     this.setState({choice: event.target.value});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>You selected {this.state.choice}</h1>\n//       <select value={this.state.mycar} onChange={this.myChangeHandler}>\n//         <option value=\"Ford\">Ford</option>\n//         <option value=\"Volvo\">Volvo</option>\n//         <option value=\"Fiat\">Fiat</option>\n//       </select>\n//       </form>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(<MyForm />, document.getElementById('root'));\n\n\n//CSS\n// class MyHeader extends React.Component {\n//   render() {\n//     const mystyle = {\n//       color: \"white\",\n//       backgroundColor: \"DodgerBlue\",\n//       padding: \"10px\",\n//       fontFamily: \"Arial\"\n//     };\n//     return (\n//       <div>\n//       <h1 style={mystyle}>Hello Style!</h1>\n//       <p>Add a little style!</p>\n//       </div>\n//     );\n//   }\n// }\n// ReactDOM.render(<MyHeader />, document.getElementById('root'));\n\n\n// changing inline css based on component state\n// class GateKeeper extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       input: ''\n//     };\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   handleChange(event) {\n//     this.setState({ input: event.target.value })\n//   }\n//   render() {\n//     let inputStyle = {\n//       border: '1px solid black'\n//     };\n//\n//     let noStyle = {\n//       border: '3px solid red'\n//     }\n//\n//     return (\n//       <div>\n//         <h3>Don't Type Too Much:</h3>\n//         <input\n//           type=\"text\"\n//           style={\n//             this.state.input.length > 15 ?\n//             noStyle :\n//             inputStyle}\n//           value={this.state.input}\n//           onChange={this.handleChange} />\n//       </div>\n//     );\n//   }\n// };\n\n\n// Dynamically render elements using Array.map()\n// const textAreaStyles = {\n//   width: 235,\n//   margin: 5\n// };\n//\n// class MyToDoList extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       userInput: '',\n//       toDoList: []\n//     }\n//\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   handleSubmit() {\n//     const itemsArray = this.state.userInput.split(',');\n//     this.setState({\n//       toDoList: itemsArray\n//     });\n//   }\n//\n//   handleChange(e) {\n//     this.setState({\n//       userInput: e.target.value\n//     });\n//   }\n//\n//   render() {\n//     const items = this.state.toDoList.map(i => <li>{i}</li>);\n//     return (\n//       <div>\n//         <textarea\n//           onChange={this.handleChange}\n//           value={this.state.userInput}\n//           style={textAreaStyles}\n//           placeholder=\"Separate Items With Commas\" />\n//         <br />\n//         <button onClick={this.handleSubmit}>Create List</button>\n//         <h1>My \"To Do\" List:</h1>\n//         <ul>\n//           {items}\n//         </ul>\n//       </div>\n//     );\n//   }\n// };\n\n\n// Array.filter()\n// class MyComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       users: [\n//         {\n//           username: 'Jeff',\n//           online: true\n//         },\n//         {\n//           username: 'Alan',\n//           online: false\n//         },\n//         {\n//           username: 'Mary',\n//           online: true\n//         },\n//         {\n//           username: 'Jim',\n//           online: false\n//         },\n//         {\n//           username: 'Sara',\n//           online: true\n//         },\n//         {\n//           username: 'Laura',\n//           online: true\n//         }\n//       ]\n//     }\n//   }\n//   render() {\n//     const usersOnline = this.state.users.filter(user => user.online==true);\n//     const renderOnline = usersOnline.map(\n//       i => <li key={i.username}>{i.username}</li>\n//       );\n//     return (\n//        <div>\n//          <h1>Current Online Users:</h1>\n//          <ul>\n//            {renderOnline}\n//          </ul>\n//        </div>\n//     );\n//   }\n// };\n\n\n//  Passing state as a props to child component, the parent/child should re-render after a change in state by child component\n// class Sibling extends React.Component {\n//   constructor(props){\n//     super(props);\n//\n//     this.state = {\n//       count: this.props.count\n//     }\n//\n//     this.hincrement = this.hincrement.bind(this);\n//   }\n//\n//   hincrement(){\n//     this.setState(state => {\n//       const count = state.count + 100\n//\n//       return {\n//         count\n//       };\n//     });\n//   }\n//\n//   render() {\n//     return (\n//       <button onClick={this.hincrement}>{this.state.count}</button>\n//     );\n//   }\n// }\n\n\nclass Child extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      count: this.props.count\n    }\n\n    this.increment = this.increment.bind(this);\n  }\n\n  increment(){\n    this.setState(state => {\n      const count = state.count + 1\n\n      return {\n        count\n      };\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <button style={{fontSize: \"30px\"}} onClick={this.increment}>{this.state.count}</button>\n        <button style={{fontSize: \"30px\"}} onClick={this.increment}>To update parent state</button>\n      </div>\n    );\n  }\n}\n\n\nclass Parent extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      count: 0\n    }\n  }\n\n  render() {\n    console.log(this.state.count)\n    return (\n      <div>\n        <h1>Counter</h1>\n        <Child count={this.state.count}/>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Parent />, document.getElementById('root'))\n"]},"metadata":{},"sourceType":"module"}